services:
  minio:
    image: minio/minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/storage
    ports:
      - "9000:9000" # api port
      - "9001:9001" # console port
    command: ["server", "/storage", "--console-address", ":9001"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 10s

  postgres:
    image: postgres:17-alpine3.22
    environment:
      POSTGRES_USER: devuser
      POSTGRES_PASSWORD: devpass
      POSTGRES_DB: myapp_dev
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db_init.sql:/docker-entrypoint-initdb.d/00_schema.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devuser -d myapp_dev"]
      interval: 5s
      timeout: 3s
      retries: 20

  # storage:

  auth:
    build:
      context: ../auth/
      dockerfile: Dockerfile
    #environment:
    #  POSTGRES_USER: devuser
    #  POSTGRES_PASSWORD: devpass
    #  POSTGRES_DB: myapp_dev
    volumes:
      - auth_data:/storage
    ports:
      - "7000:7000"
    command: ["gunicorn", "app:server"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7000/health"]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 10s

  app:
    build:
      context: ../app/
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      auth:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://devuser:devpass@postgres:5432/myapp_dev
      # LOCAL_MODE: " " # TODO: remove when testing with database enabled
      LOCAL_MODE: ""
    working_dir: /app
    #volumes:
    #  - ./:/app:rw
    command: ["gunicorn", "app:server"]
    # command: ["python", "main.py"]
    ports:
      - "8000:8000"

volumes:
  postgres_data:
  minio_data:
  auth_data:
